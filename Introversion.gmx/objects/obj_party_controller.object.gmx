<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bg_color = 0;
zoom_factor = 1;
if (global.music != "party1"){
    audio_play_music(mus_party1, true);
    global.music = "party1";
}
if(global.fromImagination != true)
{
    global.fromImagination = false;
}
else
{
    zoom_factor = 0.01;
    view_wview[0] = 180 * zoom_factor;
    view_hview[0] = 128 * zoom_factor;
    global.fromImagination = false;
}
surf = -1;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>15</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bg_color += 1;
if (bg_color == 4) bg_color = 1;

switch (bg_color){
case 1:
    background_color = c_purple;
    alarm[0] = 15;
    break;
case 2:
    background_color = c_maroon;
    alarm[0] = 15;
    break;
case 3:
    background_color = c_navy;
    alarm[0] = 8;
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*num_of_walkers = ds_list_size(global.walkers);
var i;
for (i = 0; i &lt; num_of_walkers; i+=1){
    index = ds_list_find_value(global.walkers,i);
    ds_map_replace(global.npc_map[index],"path_pos",
        ds_map_find_value(global.npc_map[index],"path_pos") + 0.01);
    if (ds_map_find_value(global.npc_map[index],"cur_room") != global.cur_room  &amp;&amp;
            ds_map_find_value(global.npc_map[index],"path_pos") &gt;= 1){
        ds_map_replace(global.npc_map[index],"path_pos", 0);
        scr_move_to_next_room(global.npc_map[index]);
        scr_get_path(global.npc_map[index]);
        if (global.cur_room == ds_map_find_value(global.npc_map[i],"cur_room")){
            var found;
            found = false
            with (obj_npc)
            {
                if (name == ds_map_find_value(global.npc_map[i], "name"))
                    found = true; 
            }
            if (!found) 
            {
                var npc = instance_create(0,0,obj_npc);
                npc.map = global.npc_map[index];
                show_debug_message("spaw----------------------------------------");
            }
            
        }
         
    }
}*/
if(zoom_factor &lt; 1)
{
    zoom_factor += 0.06;
    view_wview[0] = 180 * zoom_factor;
    view_hview[0] = 128 * zoom_factor;
    if(zoom_factor &gt;=0.5)
    {
        view_xview[0] = background_x[0];
        view_yview[0] = background_y[0];
    }
    if (zoom_factor &gt;= 1)
    {
        global.prev_room = "imagination";
        global.cur_room = "living";
        room_restart();
    }
}
else 
{
    zoom_factor = 1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//scr_spawn_npcs();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if !surface_exists(surf){
//Create (or recreate) the surface when needed
    surf = surface_create(view_wview[0], view_hview[0]);
    surface_set_target(surf);
    draw_clear(c_black);
    surface_reset_target();
    //Set the view that you want to draw to the surface
    view_surface_id[0] = surf;
}else{
    //Disable alpha blending (not needed since we are drawing the whole view)
    draw_enable_alphablend(false);
    //Draw the surface stretched to the GUI layer
    draw_surface_stretched(surf, 0, 0, display_get_gui_width(), display_get_gui_height());
    //Switch on alpha blending again for the next normal draw pass
    draw_enable_alphablend(true);
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
