<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spt_arthur_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spt_character_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>facing = 1;
walking = false;
goal_x = 100;
goal_y = 100;
path = pth_empty;

set_loc = true;
path_pos = 0;
name = "hi";
prevx = x-2;
prevy = y-3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message("destroyed")
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*moved = sqrt(power(x-prevx,2)+power(y-prevy,2));

if (moved &gt; 2){
    x = prevx;
    y = prevy;
}
prevx = x;
prevy = y;*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (ds_map_find_value(map,"cur_room") != global.cur_room){
    show_debug_message("************BAD SPAWN*****************");
    instance_destroy();
}
if (walking &amp;&amp; set_loc){
    scr_get_path(map);
    name = ds_map_find_value(map,"name")
    path = ds_map_find_value(map,"path");
    /*show_debug_message( name);
    show_debug_message( d_scr_get_path_name(path));
    show_debug_message( "npc " + ds_map_find_value(map,"cur_room"));
    show_debug_message( "global " + global.cur_room);*/
    walking = ds_map_find_value(map,"walking");
    if (ds_map_find_value(map,"path_dir") &gt; 0)
    path_pos = ds_map_find_value(map, "path_pos");
        else
    path_pos = 1-ds_map_find_value(map, "path_pos");
    if (walking){
        if (ds_map_find_value(map,"cur_room") != global.cur_room){
            show_debug_message("************BAD SPAWN*****************");
            instance_destroy();
        }else{
        switch (ds_map_find_value(map,"cur_room")){
        case "entry":
            if (ds_map_find_value(map,"next_room") == "dining"){
                goal_x = jmp_entry_to_dining.x;
                goal_y = jmp_entry_to_dining.y;
            }else if (ds_map_find_value(map,"next_room") == "kitchen"){
                goal_x = jmp_entry_to_kitchen.x;
                goal_y = jmp_entry_to_kitchen.y;
            }else{
                goal_x = jmp_entry_to_living.x;
                goal_y = jmp_entry_to_living.y;
            }
            break;
        case "living":
            if (ds_map_find_value(map,"next_room") == "entry"){
                goal_x = jmp_living_to_entry.x;
                goal_y = jmp_living_to_entry.y;
            }else{
                goal_x = jmp_livng_to_parlor.x;
                goal_y = jmp_livng_to_parlor.y;
            }
            break;
        case "parlor":
            if (ds_map_find_value(map,"next_room") == "kitchen"){
                goal_x = jmp_parlor_to_kitchen.x;
                goal_y = jmp_parlor_to_kitchen.y;
            }else{
                goal_x = jmp_parlor_to_living.x;
                goal_y = jmp_parlor_to_living.y;
            }
            break;
        case "kitchen":
            if (ds_map_find_value(map,"next_room") == "hallway"){
                goal_x = jmp_kitchen_to_hallway.x;
                goal_y = jmp_kitchen_to_hallway.y;
            }else if (ds_map_find_value(map,"next_room") == "entry"){
                goal_x = jmp_kitchen_to_entry.x;
                goal_y = jmp_kitchen_to_entry.y;
            }else{
                goal_x = jmp_kitchen_to_parlor.x;
                goal_y = jmp_kitchen_to_parlor.y;
            }
            break;
        case "hallway":
            if (ds_map_find_value(map,"next_room") == "dining"){
                goal_x = jmp_hallway_to_dining.x;
                goal_y = jmp_hallway_to_dining.y;
            }else{
                goal_x = jmp_hallway_to_kitchen.x;
                goal_y = jmp_hallway_to_kitchen.y;
            }
            break;
        case "dining":
            if (ds_map_find_value(map,"next_room") == "hallway"){
                goal_x = jmp_dining_to_hallway.x;
                goal_y = jmp_dining_to_hallway.y;
            }else{
                goal_x = jmp_dining_to_entry.x;
                goal_y = jmp_dining_to_entry.y;
            }
            break;
        }}
    }
    path_start(path,0.5,"",1);
    path_position = path_pos;
    set_loc = false;
    x = floor(x);
    y = floor(y);
    grid = mp_grid_create(0,0,room_width/8, room_height/8,8,8);
    screen_path=path_add();
    mp_grid_add_instances(grid,obj_npc_wall,0);
    show_debug_message("~~~~~~~~~~" + name + " has been placed~~~~~~~~~~~");
    show_debug_message(d_scr_get_path_name(path));
    show_debug_message("goal (" + string(goal_x) + "," + string(goal_y) + ")");
    show_debug_message("pos (" + string(x) + "," + string(y) + ")");
    show_debug_message("prev: " + ds_map_find_value(map,"prev_room"));
    show_debug_message("cur: " + ds_map_find_value(map,"cur_room"));
    show_debug_message("next: " + ds_map_find_value(map,"next_room"));
    show_debug_message("-----------------------");
    //ath_end();
    
}else if (walking){
    //show_debug_message("pre_pos (" + string(x) + "," + string(y) + ")");
    mp_grid_path(grid,screen_path,x,y,goal_x,goal_y,1);
    path_start(screen_path,1.5,"",0);
    
    /*if (x &lt; goal_x) x = x + 1;
    if (x &gt; goal_x) x = x-1;
    if (y &lt; goal_y) y = y + 1;
    if (y &gt; goal_y) y = y - 1;*/

    if (x &gt; prevx) facing = 1;
    if (x &lt; prevx) facing = -1;
    if (sqrt(power(x-goal_x,2)+power(y-goal_y,2)) &lt; 1){
        show_debug_message("^^^^^^^^" + name+" Has Left^^^^^^^^^^");
        scr_move_to_next_room(map);
        ds_map_replace(map,"path_pos", 0);
        show_debug_message(name);
    show_debug_message(d_scr_get_path_name(path));
    show_debug_message("goal (" + string(goal_x) + "," + string(goal_y) + ")");
    show_debug_message("pos (" + string(x) + "," + string(y) + ")");
    show_debug_message("prev: " + ds_map_find_value(map,"prev_room"));
    show_debug_message("cur: " + ds_map_find_value(map,"cur_room"));
    show_debug_message("next: " + ds_map_find_value(map,"next_room"));
    show_debug_message("-----------------------");
        instance_destroy();
    }
    path_pos = ds_map_find_value(map,"path_pos");
}
depth = -y +100;

if (walking &amp;&amp; !scr_check_correct_path(path)){
    show_debug_message("wehfengergjnegerghniutnt itjbn trjbnibtj");
    show_debug_message(name);
    show_debug_message(d_scr_get_path_name(path));
    show_debug_message("goal (" + string(goal_x) + "," + string(goal_y) + ")");
    show_debug_message("pos (" + string(x) + "," + string(y) + ")");
    show_debug_message("prev: " + ds_map_find_value(map,"prev_room"));
    show_debug_message("cur: " + ds_map_find_value(map,"cur_room"));
    show_debug_message("next: " + ds_map_find_value(map,"next_room"));
    show_debug_message("-----------------------");
    set_loc = 1;
    

}
/*
show_debug_message("-----------------------");
show_debug_message(name);
show_debug_message(d_scr_get_path_name(path));
show_debug_message("goal (" + string(goal_x) + "," + string(goal_y) + ")");
show_debug_message("pos (" + string(x) + "," + string(y) + ")");
show_debug_message("prev: " + ds_map_find_value(map,"prev_room"));
show_debug_message("cur: " + ds_map_find_value(map,"cur_room"));
show_debug_message("next: " + ds_map_find_value(map,"next_room"));
show_debug_message("-----------------------");*/
if (walking){
if (prevx == x &amp;&amp; prevy == y){
    x = irandom_range(-1,1);
    y = irandom_range(-1,1);
}
prevx = x;
prevy = y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(ds_map_find_value(map,"spt_idle"),image_index,x,y,facing,1,0,c_white,1);
//draw_path(ds_map_find_value(map,"path"), 0, 0, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>4,40</point>
    <point>20,20</point>
  </PhysicsShapePoints>
</object>
