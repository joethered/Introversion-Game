<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spt_player_vania_walk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>107</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_gravity</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>270</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>facing = -1;
can_move = true;
jumping = false;
sword = 0;
start_x = x;
start_y = y;
state = 0;
zoom_factor = 1;
demo_count = 0;
image_speed = 0.2;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_play_music(mus_hell,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sword += 1;
if (sword == 2)
    alarm[0] = 8;
if(sword &gt; 2)
    sword = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if(recentlyDamaged)
{
    hspeed = facing*20;
    recentlyDamaged = false;
    audio_play_sound(sfx_player_hit, true,0);
}else if (!damaged){*/

if (keyboard_check_pressed(vk_tab)){
    room_restart();
}
if (state == 1 &amp;&amp; keyboard_check_pressed(ord('X')))
    state += 1;
if (state == 2){
    if (zoom_factor &gt; 0.50)
        zoom_factor -= 0.05;
    if (zoom_factor == 0.50 &amp;&amp; keyboard_check(vk_left)){
        hspeed = -4;
        facing = -1;
        state += 1;
    }
}else if (state == 3){

    if (zoom_factor &lt; 1)
        zoom_factor += 0.05;  
    if(sword == 0 &amp;&amp; jumping == false &amp;&amp; keyboard_check_pressed(ord('X'))){
        jumping = true;
        vspeed = -12;    
    }
    
    if (sword == 0 &amp;&amp; keyboard_check(vk_right)){
        facing = 1;
        hspeed = 4;
    }
    if (hspeed &gt; 0 &amp;&amp; keyboard_check_released(vk_right)){
        hspeed = 0;
    }
    
    if (sword == 0 &amp;&amp; keyboard_check(vk_left)){
        hspeed = -4;
        facing = -1;
    }
    if (hspeed &lt; 0 &amp;&amp; keyboard_check_released(vk_left)){
        hspeed = 0;
    }
    
    if (x &gt; 176 &amp;&amp; sword = 0 &amp;&amp; keyboard_check_pressed(ord('C'))){
    alarm[0] = 5;
        sword = 1;
        if (!jumping)
            hspeed = 0;
    }
    if (state == 3 &amp;&amp; x &lt; 192){
        state += 1;
        hspeed = 0;
        demo_count = 0;
    }
}else if (state == 4){
    hspeed = 0;
    if (zoom_factor &gt; 0.60)
        zoom_factor -= 0.05;
    if (zoom_factor == 0.60 &amp;&amp; keyboard_check(ord('X')) &amp;&amp; hspeed == 0){
        jumping = true;
        vspeed = -11; 
        hspeed = -6;
        state += 1;
    }
}
if (state == 5 &amp;&amp; x &lt; 96){
    gravity = 0;
    hspeed = 0;
    vspeed = 0;
    demo_count = 0;
    state += 1;
}
if (state == 6){
    if (keyboard_check_pressed(ord('C'))){
        state += 1;
        demo_count = 0;
    }

}
if (state == 7){
    if (demo_count &gt;12){
        state += 1;
        gravity = 1;
        hspeed = 10;
        vspeed = -4;
        demo_count = 0;
    }
    demo_count += 1;

}

if (state == 9){
    if (demo_count &lt; 16 || demo_count &gt; 18)
        demo_count += 1;
    else if (keyboard_check_pressed(ord('X')))
        demo_count += 1;
    if (demo_count &gt; 40)
        room_goto(rm_entry_cutscene);
}

view_wview[0] = 320 * zoom_factor;
view_hview[0] = 256 * zoom_factor;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_fire">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = start_x;
y = start_y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_brick">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == 0) state += 1;
if (state == 8){
    hspeed = 0;
    state += 1;
    demo_count = 0;
}
if (vspeed &gt; 0 &amp;&amp; !place_free(x,y+vspeed))
{ 
    move_contact(270)
    vspeed = 0;
    jumping = 0;
}

if (vspeed &lt; 0 &amp;&amp; !place_free(x,y+vspeed))
{ 
    move_contact(90)
    vspeed = 0;
}

if (hspeed != 0 &amp;&amp; !place_free(x + hspeed,y))
{ 
    if( hspeed &gt; 0)
        move_contact(0);
    else
        move_contact(180);   
    hspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*alpha = 1;
if(invulnerable)
{
    if (image_index % 2 == 0)
        alpha = 1;
    else
        alpha = 0.5;
    
}
if(damaged)
{
    alpha = 0;
}

*/
if (state != 7){
    if (sword == 0){
        if (jumping){
            draw_sprite_ext(spt_player_vania_jump,0,x,y,facing,1,0,c_white,1);
        }else{
            if(state == 9 &amp;&amp; demo_count &gt;= 19)
                draw_sprite(spt_player_party,0,x,y);
            else{
                if (hspeed != 0){
                    draw_sprite_ext(spt_player_vania_walk,image_index,x,y,facing,1,0,c_white,1);
                }else{
                    draw_sprite_ext(spt_player_vania_idle,0,x,y,facing,1,0,c_white,1);
                }
            }
        }
    }
    if (sword == 1)
        draw_sprite_ext(spt_player_vania_sword1,0,x,y,facing,1,0,c_white,1);
    if (sword == 2)
        draw_sprite_ext(spt_player_vania_sword2,0,x,y,facing,1,0,c_white,1);
}
if (state == 1){
    if (demo_count &gt; 10){
        draw_sprite(spt_intro_dia1,0,x-46,y-56);
        draw_sprite_ext(spt_x_key,image_index,x+16,y-58,1,1,0,c_white,1);
    }
    demo_count += 1;
}
if (state == 2){
    draw_sprite_ext(spt_left_arrow_key,image_index,x,y-52,1,1,0,c_white,1);
    draw_sprite_ext(spt_player_vania_walk,image_index,x-demo_count,y,facing,1,0,c_white,0.3);  
    demo_count += 4;
    if (demo_count == 64)
        demo_count = 0;
}

if (state == 4){
    draw_sprite_ext(spt_x_key,image_index,x,y-52,1,1,0,c_white,1);
    if (demo_count &gt; 0)
        draw_sprite_ext(spt_player_vania_jump,image_index,x-(4*demo_count),y+sqr(demo_count-8)-64,facing,1,0,c_white,0.3);  
    demo_count += 0.25;
    if (demo_count == 8)
        demo_count = 0;
}
if (state == 6){
    draw_sprite_ext(spt_c_key,image_index,x,y-52,1,1,0,c_white,1);
    if (demo_count &lt; 5)
        draw_sprite_ext(spt_player_vania_sword1,0,x,y,facing,1,0,c_white,0.3);
    if (demo_count &gt; 5)
        draw_sprite_ext(spt_player_vania_sword2,0,x,y,facing,1,0,c_white,0.3);
    demo_count += 1;
    if (demo_count == 10)
        demo_count = 0;
}
if (state == 7){
    draw_sprite_ext(spt_player_vania_sword1,0,x,y,facing,1,0,c_white,1);
}

if (state == 9){
    draw_sprite_ext(spt_mario_idle,0,x+64,y,-1,1,0,c_white,1);
    if (demo_count == 16)
        draw_sprite(spt_intro_dia2,0,x-40,y-56);
    if (demo_count == 17)
        draw_sprite(spt_intro_dia3,0,x+18,y-56);
    if (demo_count == 18)
        draw_sprite(spt_intro_dia4,0,x-40,y-56);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>15,43</point>
    <point>22,22</point>
  </PhysicsShapePoints>
</object>
